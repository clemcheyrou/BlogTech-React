let verify,User;_71a‍.x([["authGuard",()=>authGuard],["adminGuard",()=>adminGuard]]);_71a‍.w("jsonwebtoken",[["verify",["verify"],function(v){verify=v}]]);_71a‍.w("../models/User",[["default",["User"],function(v){User=v}]]);


       const authGuard = async (req, res, next) => {
	if (req.headers.authorization && req.headers.authorization.startsWith("Bearer"))
	{
		try {
			const token = req.headers.authorization.split(" ")[1];
			const {id} = verify(token, process.env.JW_SECRET);
			req.user = await User.findById(id).select('-password');
			next();
		} catch (error) {
			let err = new Error("Not authorized, Token failed");
			err.statusCode = 401;
			next(err);
		}
	}
	else
	{
		let error = new Error("Not authorized, Token failed");
		error.statusCode = 401;
		next(error);
	}
}

       const adminGuard = (req, res, next) => {
	if (req.user && req.user.admin) {
	  next();
	} else {
	  let error = new Error("Not authorized as an admn");
	  error.statusCode = 401;
	  next(error);
	}
  };