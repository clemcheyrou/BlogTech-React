let Schema,model,hash,sign;_b88‍.x([["default",()=>_b88‍.o]]);_b88‍.w("mongoose",[["Schema",["Schema"],function(v){Schema=v}],["model",["model"],function(v){model=v}]]);_b88‍.w("bcryptjs",[["hash",["hash"],function(v){hash=v}]]);_b88‍.w("jsonwebtoken",[["sign",["sign"],function(v){sign=v}]]);



const UserSchema = new Schema(
	{
		avatar: { type: String, default: "" },
		name: { type: String, required: true },
		email: { type: String, required: true },
		password: { type: String, required: true },
		verified: { type: Boolean, required: false },
		verificationCode: { type: String, required: false },
		admin: { type: Boolean, required: false }
	},
	{ timestamps: true }
);

UserSchema.pre('save', async function(next) {
	if (this.isModified('password')) {
		this.password = await hash(this.password, 10);
		return next()
	}
	return next()
});

UserSchema.methods.generateJWT = async function() {
	return await sign({id: this._id}, `${process.env.JWT_SECRET_KEY}`, {expiresIn: "30d",
	});
};

UserSchema.methods.comparePassword = async function(enteredPassword) {
	return await compare(enteredPassword, this.password);
}


const User = model("User", UserSchema);
_b88‍.d(User);